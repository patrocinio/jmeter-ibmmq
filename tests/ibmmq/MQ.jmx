<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.4.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="duration" elementType="Argument">
            <stringProp name="Argument.name">duration</stringProp>
            <stringProp name="Argument.value">60</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="setupDone" elementType="Argument">
            <stringProp name="Argument.name">setupDone</stringProp>
            <stringProp name="Argument.value">false</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="stopDone" elementType="Argument">
            <stringProp name="Argument.name">stopDone</stringProp>
            <stringProp name="Argument.value">false</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="nrThreads" elementType="Argument">
            <stringProp name="Argument.name">nrThreads</stringProp>
            <stringProp name="Argument.value">4</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="sampleAtSecond" elementType="Argument">
            <stringProp name="Argument.name">sampleAtSecond</stringProp>
            <stringProp name="Argument.value">50</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="hostName" elementType="Argument">
            <stringProp name="Argument.name">hostName</stringProp>
            <stringProp name="Argument.value">secureqm-ibm-mq-qm-mq.patrocinio-684-dallas-ddd93d3a0fef01f6b396b69d343df410-0000.us-south.containers.appdomain.cloud</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="port" elementType="Argument">
            <stringProp name="Argument.name">port</stringProp>
            <stringProp name="Argument.value">443</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="queueManager" elementType="Argument">
            <stringProp name="Argument.name">queueManager</stringProp>
            <stringProp name="Argument.value">SECUREQM</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="setUp Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stoptestnow</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </SetupThreadGroup>
      <hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">${__jexl3(&quot;${setupDone}&quot;== &quot;false&quot;,)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <JSR223Timer guiclass="TestBeanGUI" testclass="JSR223Timer" testname="JSR223 Timer - Setup" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import com.ibm.msg.client.jms.JmsConnectionFactory
import com.ibm.msg.client.jms.JmsFactoryFactory
import com.ibm.msg.client.wmq.WMQConstants

import javax.jms.Session

log.info(&quot;#### Setup started&quot;)

// 1
def hostName         	= vars.get(&quot;hostName&quot;)
def hostPort 			= vars.get(&quot;port&quot;) as int
def channelName 		= &quot;SECUREQMCHL&quot;
def queueManagerName 	= vars.get(&quot;queueManager&quot;)
def queueName 			= &quot;EXAMPLE.QUEUE&quot;
def cipherSpec 		= &quot;ECDHE_RSA_AES_128_CBC_SHA256&quot;

// 2
def ff = JmsFactoryFactory.getInstance(WMQConstants.WMQ_PROVIDER)
def cf = ff.createConnectionFactory()

// 3
cf.setStringProperty	(WMQConstants.WMQ_HOST_NAME, 			hostName)
cf.setIntProperty		(WMQConstants.WMQ_PORT, 				hostPort)
cf.setStringProperty	(WMQConstants.WMQ_CHANNEL, 			channelName)
cf.setIntProperty		(WMQConstants.WMQ_CONNECTION_MODE, 	WMQConstants.WMQ_CM_CLIENT)
cf.setStringProperty	(WMQConstants.WMQ_QUEUE_MANAGER, 		queueManagerName)


/**
 * TLS Section
 */
 
def tlsKeystorePath = &quot;tests/ibmmq/clientkey.jks&quot;;
def tlsKeystorePwd = &quot;password&quot;;

//cf.setStringProperty(WMQConstants.WMQ_SSL_CIPHER_SUITE, cipherSuite)
cf.setStringProperty(WMQConstants.WMQ_SSL_CIPHER_SPEC, cipherSpec)

System.setProperty(&quot;com.ibm.mq.cfg.preferTLS&quot;, 			&quot;true&quot;)
System.setProperty(&quot;com.ibm.mq.cfg.useIBMCipherMappings&quot;, 	&quot;false&quot;)
System.setProperty(&quot;javax.net.ssl.keyStore&quot;, 			tlsKeystorePath)
System.setProperty(&quot;javax.net.ssl.keyStorePassword&quot;, 		tlsKeystorePwd)
System.setProperty(&quot;javax.net.ssl.trustStore&quot;, 			tlsKeystorePath)
System.setProperty(&quot;javax.net.ssl.trustStorePassword&quot;, 	tlsKeystorePwd)

/**
 * TLS Section - END
 */

// 4
def conn = cf.createConnection(&quot;app&quot;, &quot;test&quot;)
def sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE)

// 5
def destination = sess.createQueue(queueName)

conn.start()

log.info(&quot;#### Start completed!&quot;)

// 6
System.getProperties().put(&quot;Session&quot;, sess)
System.getProperties().put(&quot;Connection&quot;, conn)
System.getProperties().put(&quot;Destination&quot;, destination)

// 7
vars.put(&quot;setupDone&quot;, &quot;true&quot;)

// Define global properties
props.put(&quot;produced&quot;, 0)
props.put(&quot;consumed&quot;, 0)

log.info(&quot;#### Start completed!&quot;)

</stringProp>
          </JSR223Timer>
          <hashTree/>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug setUp" enabled="true">
            <boolProp name="displayJMeterProperties">true</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <PostThreadGroup guiclass="PostThreadGroupGui" testclass="PostThreadGroup" testname="tearDown Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stoptestnow</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </PostThreadGroup>
      <hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">${__jexl3(&quot;${stopDone}&quot;== &quot;false&quot;,)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug tearDown" enabled="true">
            <boolProp name="displayJMeterProperties">true</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Check produced and consumed" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">var produced = props.get(&quot;produced&quot;)
var consumed = props.get(&quot;consumed&quot;)

log.info (&quot;==&gt; Produced &quot; + produced + &quot; but consumed &quot; + consumed)

if (consumed != produced) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Produced &quot; + produced + &quot; but consumed &quot; + consumed)
}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <JSR223Timer guiclass="TestBeanGUI" testclass="JSR223Timer" testname="JSR223 Timer - Stop" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">// 1
System.getProperties().get(&quot;Session&quot;).close()
System.getProperties().get(&quot;Connection&quot;).close()

log.info(&quot;#### Stop completed!&quot;)

// 2
vars.put(&quot;stopDone&quot;, &quot;true&quot;)

</stringProp>
          </JSR223Timer>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group - Producer" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stoptestnow</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${nrThreads}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${__P(duration,60)}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="false">
          <intProp name="calcMode">2</intProp>
          <stringProp name="throughput">${__jexl2(${sampleAtSecond}*60)}</stringProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler - Producer" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import java.time.Instant

// 1
def sess = System.getProperties().get(&quot;Session&quot;)
def destination = System.getProperties().get(&quot;Destination&quot;)

// 2
def producer = sess.createProducer(destination)

// 3
def rnd = new Random(System.currentTimeMillis())

// 4
def payload = String.format(&quot;JMeter...IBM MQ...test message no. %09d!&quot;, rnd.nextInt(Integer.MAX_VALUE))
log.info (&quot;==&gt; Payload: &quot; + payload)
def msg = sess.createTextMessage(payload)

def start = Instant.now()

// 5
producer.send(msg)

def stop = Instant.now()

// 6
producer.close()

// 7
var latency = stop.toEpochMilli() - start.toEpochMilli()

SampleResult.setResponseData(msg.toString())
SampleResult.setDataType( org.apache.jmeter.samplers.SampleResult.TEXT )
SampleResult.setLatency( latency )


log.info (&quot;Latency: &quot; + latency)

// 8
var produced = props.get(&quot;produced&quot;) as Integer +1
log.info (&quot;Produced: &quot; + produced)
props.put(&quot;produced&quot;, &quot;&quot; + produced)
</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler - Producer" enabled="false">
          <boolProp name="displayJMeterProperties">true</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group - Consumer" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stoptestnow</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${nrThreads}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${__jexl2(${duration}+10)}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="false">
          <intProp name="calcMode">2</intProp>
          <stringProp name="throughput">${__jexl2(${sampleAtSecond}*60)}</stringProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <JSR223Timer guiclass="TestBeanGUI" testclass="JSR223Timer" testname="JSR223 Timer - Consumer" enabled="false">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import javax.jms.TextMessage
import javax.jms.BytesMessage

import java.time.LocalDate
import java.time.LocalTime
import java.time.Instant
import java.time.format.DateTimeFormatter

// 1
def sess = System.getProperties().get(&quot;Session&quot;)
def destination = System.getProperties().get(&quot;Destination&quot;)

// 2
def consumer = sess.createConsumer(destination)

def start = Instant.now()

// 3
def msg = consumer.receive(1000)

def stop = Instant.now()

// 4
if (msg != null) {
            // 5
	if (msg instanceof BytesMessage) {
		def tmp = msg.asType(BytesMessage)
		log.debug(&quot;#### Incoming BytesMessage contains &quot; + tmp.getBodyLength() + &quot; bytes&quot;)
	} else if (msg instanceof TextMessage) {
		def tmp = msg.asType(TextMessage)
		log.debug(&quot;#### Incoming TextMessage contains -&gt; &quot; + tmp.getText())
	} else
		log.debug(&quot;#### Incoming message has unexpected format!&quot;)

            // 6
	LocalDate date = LocalDate.parse(msg.getStringProperty(&quot;JMS_IBM_PutDate&quot;),
					DateTimeFormatter.ofPattern(&quot;uuuuMMdd&quot;))
	LocalTime time = LocalTime.parse(msg.getStringProperty(&quot;JMS_IBM_PutTime&quot;),
					DateTimeFormatter.ofPattern(&quot;HHmmssSS&quot;))

	// 7
            def timestampDetail = String.format(&quot;#### Incoming message was placed in queue @ %s - %s&quot;, date, time)
	log.info(timestampDetail)

	// 8
            SampleResult.setResponseData(msg.toString() + &quot;\n\n&quot; + timestampDetail)
	SampleResult.setDataType( org.apache.jmeter.samplers.SampleResult.TEXT )
	SampleResult.setLatency( stop.toEpochMilli() - start.toEpochMilli() )

} else {
	log.info(&quot;#### Nothing to fetch!&quot;)
}

// 9
consumer.close()</stringProp>
        </JSR223Timer>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler - Consumer" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import javax.jms.TextMessage
import javax.jms.BytesMessage

import java.time.LocalDate
import java.time.LocalTime
import java.time.Instant
import java.time.format.DateTimeFormatter

// 1
def sess = System.getProperties().get(&quot;Session&quot;)
def destination = System.getProperties().get(&quot;Destination&quot;)

// 2
def consumer = sess.createConsumer(destination)

def start = Instant.now()

// 3
def msg = consumer.receive(1000)

def stop = Instant.now()

// 4
if (msg != null) {
            // 5
	if (msg instanceof BytesMessage) {
		def tmp = msg.asType(BytesMessage)
		log.debug(&quot;#### Incoming BytesMessage contains &quot; + tmp.getBodyLength() + &quot; bytes&quot;)
	} else if (msg instanceof TextMessage) {
		def tmp = msg.asType(TextMessage)
		log.debug(&quot;#### Incoming TextMessage contains -&gt; &quot; + tmp.getText())
	} else
		log.debug(&quot;#### Incoming message has unexpected format!&quot;)

            // 6
	LocalDate date = LocalDate.parse(msg.getStringProperty(&quot;JMS_IBM_PutDate&quot;),
					DateTimeFormatter.ofPattern(&quot;uuuuMMdd&quot;))
	LocalTime time = LocalTime.parse(msg.getStringProperty(&quot;JMS_IBM_PutTime&quot;),
					DateTimeFormatter.ofPattern(&quot;HHmmssSS&quot;))

	// 7
            def timestampDetail = String.format(&quot;#### Incoming message was placed in queue @ %s - %s&quot;, date, time)
	log.info(timestampDetail)

	// 8
            SampleResult.setResponseData(msg.toString() + &quot;\n\n&quot; + timestampDetail)
	SampleResult.setDataType( org.apache.jmeter.samplers.SampleResult.TEXT )
	SampleResult.setLatency( stop.toEpochMilli() - start.toEpochMilli() )

	var consumed = props.get(&quot;consumed&quot;) as Integer +1
	log.info (&quot;Consumed: &quot; + consumed)
	props.put(&quot;consumed&quot;, &quot;&quot; + consumed)


} else {
	log.info(&quot;#### Nothing to fetch!&quot;)
}

// 9
consumer.close()</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
